# Nom du workflow
name: CI Pipeline

# Événements qui déclenchent le workflow
on:
  pull_request:
    branches:
      - develop # Déclenche le workflow à chaque Pull Request vers la branche 'develop'

# Jobs à exécuter dans ce workflow
jobs:
  build_and_test:
    # Nom du job
    name: Build and Test Services

    # Runner sur lequel le job s'exécutera
    runs-on: ubuntu-latest

    # Étapes du job
    steps:
      # Étape 1: Cloner le code du repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Étape 3: Construire les images Docker
      - name: Build Docker images
        run: |
          docker compose build --no-cache --progress=plain

      # Étape 4: Démarrer les services (pour les tests d'intégration et de santé)
      - name: Start services
        run: |
          docker compose up -d --wait

      # Étape 5: Vérifier l'état des services (optionnel)
      - name: Check service status
        run: |
          docker compose ps

      # Étape 6: Exécuter des tests pour chaque service (structure)
      # Nous ajouterons les commandes de test spécifiques plus tard

      # Test du backend (Django)
      - name: Run Django tests
        run: |
          # docker compose exec web python manage.py test

      # Test du frontend (React)
      - name: Run Frontend tests
        run: |
          # docker compose exec frontend npm test # ou yarn test

      # Test d'intégration (optionnel)
      - name: Run Integration tests
        run: |
          # Exemple: Exécute des tests qui vérifient l'interaction entre les services

      # Étape 7: Arrêter les services (important pour nettoyer le runner)
      - name: Stop services
        if: always()
        run: |
          docker compose down