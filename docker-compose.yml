version: '3.8'

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  grafana_data:
  staticfiles_volume: # Nouveau volume pour les fichiers statiques

services:
  nginx:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443" # Si vous utilisez le HTTPS via Nginx
    networks: [backend]
    depends_on:
      - prometheus
      - grafana
      - rabbitmq
      - frontend
      - web
      - postgres-exporter # Ajout de la dépendance
    volumes:
      # Monte le volume statique en lecture seule pour Nginx
      - staticfiles_volume:/app/staticfiles:ro

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"  # Ajoutez cette ligne pour exposer le port
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=http://localhost/query/'

  grafana:
    image: grafana/grafana:latest
    env_file: .env
    restart: always
    ports:
      - "3000:3000"  # Port exposé pour accès direct et Docker Desktop
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    networks: [backend]
    depends_on:
      prometheus:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4-management
    env_file: .env
    ports:
      - "15672:15672"  # Port exposé pour l'interface de management et Docker Desktop
      - "5672:5672"    # Port exposé pour la communication AMQP
    networks: [backend]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    env_file: .env
    ports:
      - "5432:5432"  # Port exposé pour accès direct (ex: avec un client SQL) et Docker Desktop
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "8000:8000"
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        gunicorn server_config.wsgi:application --bind 0.0.0.0:8000 --timeout 120
      "
    networks: [backend]
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - staticfiles_volume:/app/staticfiles # Ce volume est correct

  celery:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A server_config worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
    networks: [backend]
    depends_on:
      - web
      - rabbitmq

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Port exposé pour accès direct au frontend (Vite dev server) et Docker Desktop
    networks: [backend]

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    env_file: .env
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    networks: [backend]
    depends_on:
      db:
        condition: service_healthy